// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

package org.jetbrains.kotlin.parcelize.ide.test;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.base.test.TestRoot;
import org.junit.runner.RunWith;

/**
 * This class is generated by {@link org.jetbrains.kotlin.testGenerator.generator.TestGenerator}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("compiler-plugins/parcelize/tests/k2")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../testData/quickfix")
public abstract class ParcelizeK2QuickFixTestGenerated extends AbstractParcelizeK2QuickFixTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/addPrimaryConstructor")
    public static class AddPrimaryConstructor extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("constructorWithDelegate.kt")
        public void testConstructorWithDelegate() throws Exception {
            runTest("../testData/quickfix/addPrimaryConstructor/constructorWithDelegate.kt");
        }

        @TestMetadata("noQuickFix.kt")
        public void testNoQuickFix() throws Exception {
            runTest("../testData/quickfix/addPrimaryConstructor/noQuickFix.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/quickfix/addPrimaryConstructor/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/cantBeInnerClass")
    public static class CantBeInnerClass extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/quickfix/cantBeInnerClass/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/classShouldBeAnnotated")
    public static class ClassShouldBeAnnotated extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/quickfix/classShouldBeAnnotated/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/deleteIncompatible")
    public static class DeleteIncompatible extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("creatorField.kt")
        public void testCreatorField() throws Exception {
            runTest("../testData/quickfix/deleteIncompatible/creatorField.kt");
        }

        @TestMetadata("writeToParcel.kt")
        public void testWriteToParcel() throws Exception {
            runTest("../testData/quickfix/deleteIncompatible/writeToParcel.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/noParcelableSupertype")
    public static class NoParcelableSupertype extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("alreadyHasSupertype.kt")
        public void testAlreadyHasSupertype() throws Exception {
            runTest("../testData/quickfix/noParcelableSupertype/alreadyHasSupertype.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/quickfix/noParcelableSupertype/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/propertyWontBeSerialized")
    public static class PropertyWontBeSerialized extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/quickfix/propertyWontBeSerialized/simple.kt");
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../testData/quickfix/removeDuplicatingTypeParcelerAnnotation")
    public static class RemoveDuplicatingTypeParcelerAnnotation extends AbstractParcelizeK2QuickFixTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("../testData/quickfix/removeDuplicatingTypeParcelerAnnotation/simple.kt");
        }
    }
}
